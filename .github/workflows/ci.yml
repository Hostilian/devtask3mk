name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  format-and-lint:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Scala
        uses: coursier/setup-action@v1
        with:
          apps: sbt
          
      - name: Cache SBT dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.sbt
            ~/.coursier/cache
            target
            project/target
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', 'project/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-sbt-
            
      - name: Format code
        run: sbt scalafmtAll
        
      - name: Check if formatting changed files
        id: format-check
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "formatted=true" >> $GITHUB_OUTPUT
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add -A
            git commit -m "Auto-format code with scalafmt [skip ci]"
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Push formatted code
        if: steps.format-check.outputs.formatted == 'true' && github.event_name == 'push'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: format-and-lint
    strategy:
      matrix:
        java-version: ['21']
        scala-version: ['3.4.3']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          
      - name: Setup Scala
        uses: coursier/setup-action@v1
        with:
          apps: sbt
          
      - name: Cache SBT dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.sbt
            ~/.coursier/cache
            target
            project/target
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', 'project/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-sbt-
            
      - name: Compile code
        run: sbt compile
        
      - name: Run tests
        run: sbt test
        
      - name: Generate test report
        run: sbt "testOnly * -- -u target/test-reports"
        if: always()
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-java-${{ matrix.java-version }}
          path: target/test-reports/
          
      - name: Package application
        run: sbt package
        
      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scala-jars-${{ matrix.scala-version }}
          path: target/scala-*/document-matrix_*-*.jar

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: format-and-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Scala
        uses: coursier/setup-action@v1
        with:
          apps: sbt
          
      - name: Run dependency check
        run: sbt dependencyCheck || true
        continue-on-error: true

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --help || true
          
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Scala
        uses: coursier/setup-action@v1
        with:
          apps: sbt
          
      - name: Run benchmarks
        run: sbt "test:runMain org.openjdk.jmh.Main -rf json -rff target/jmh-results.json" || true
        continue-on-error: true
        
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: target/jmh-results.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
